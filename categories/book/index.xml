<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>book - Category - 사랑합니다 기술 블로그</title><link>https://i-loveu.github.io/categories/book/</link><description>book - Category - 사랑합니다 기술 블로그</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 08 May 2022 05:36:31 +0900</lastBuildDate><atom:link href="https://i-loveu.github.io/categories/book/" rel="self" type="application/rss+xml"/><item><title>객체지향 원칙</title><link>https://i-loveu.github.io/principle-oop/</link><pubDate>Sun, 08 May 2022 05:36:31 +0900</pubDate><author>Author</author><guid>https://i-loveu.github.io/principle-oop/</guid><description>객체지향 기초 추상화 캡슐화 다형성 상속 객체지향 원칙 바뀌는 부분은 캡슐화 한다 상속보다는 구성을 활용한다 구현보다는 인터페이스에 맞춰서 프로그래밍한다 상호작용하는 객체 사이에서는 가능하면 느슨한 결합을 사용해야 한다 클래스는 확장에는 열려 있어야 하지만 변경에는 닫혀 있어야 한다(ocp) 추상화된 것에 의존하게 만들고 구상 클래스에 의존하지 않게 만든다 객체지향 패턴 어댑터 패턴 특정 클래스 인터페이스를 클라이언트에서 요구하는 다른 인터페이스로 변환합니다. 인터페이스가 호환되지 않아 같이 쓸 수 없었던 클래스를 사용할 수 있게 도와줍니다.</description></item></channel></rss>